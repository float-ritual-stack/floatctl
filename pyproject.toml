[project]
name = "floatctl"
version = "0.1.0"
description = "A modern plugin-based CLI tool for managing FLOAT conversation exports and AI workflows"
readme = "README.md"
authors = [
    {name = "Evan Schultz", email = "evan@example.com"}
]
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["cli", "conversations", "ai", "float", "export"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

dependencies = [
    "rich-click>=1.8.0",
    "pydantic>=2.5.0",
    "loguru>=0.7.0",
    "pathlib-abc>=0.1.0",
    "typer>=0.9.0",
    "sqlalchemy>=2.0.41",
    "alembic>=1.16.4",
    "structlog>=25.4.0",
    "chromadb>=0.4.0",
    "mcp>=1.0.0",
    "langextract>=1.0.7",
    "python-dotenv>=1.1.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pre-commit>=3.6.0",
]
repl = [
    "prompt-toolkit>=3.0.0",
]
textual = [
    "textual>=0.47.0",
]

[project.urls]
Homepage = "https://github.com/evanschultz/floatctl"
Documentation = "https://floatctl.readthedocs.io"
Repository = "https://github.com/evanschultz/floatctl"
Issues = "https://github.com/evanschultz/floatctl/issues"

[project.scripts]
floatctl = "floatctl.cli:main"

[project.entry-points."floatctl.plugins"]
conversations = "floatctl.plugins.conversations:ConversationsPlugin"
consciousness = "floatctl.plugins.consciousness_query:ConsciousnessQueryPlugin"
artifacts = "floatctl.plugins.artifacts:ArtifactsPlugin"
export = "floatctl.plugins.export:ExportPlugin"
chroma = "floatctl.plugins.chroma:ChromaPlugin"
forest = "floatctl.plugins.forest:ForestPlugin"
repl = "floatctl.plugins.interactive_repl:InteractiveREPLPlugin"
textual = "floatctl.plugins.textual_float:TextualFloatPlugin"
float-simple = "floatctl.plugins.textual_float_simple:SimpleTextualFloatPlugin"
mcp = "floatctl.plugins.mcp_server:MCPServerPlugin"
dev-tools = "floatctl.plugins.dev_tools:DevToolsPlugin"

[dependency-groups]
dev = [
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.3",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=floatctl",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/floatctl"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"
